name: Build, Push, and Deploy Docker to GHCR

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: landing-page-vspring
  GHCR_ORG: vspringdev
  REGISTRY: ghcr.io

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & Push (cached)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VM (Blue/Green fixed ports)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
              set -euo pipefail

              CONF="/etc/nginx/sites-available/farid1.conf"
              NAME="landing-page-vspring"
              IMAGE="ghcr.io/vspringdev/landing-page-vspring:${TAG}"   # isi TAG dari CI
              BLUE=3000
              GREEN=3001

              # Pull & start container baru di port lawan
              ACTIVE_PORT=$(awk '
                $1=="upstream" && $2=="farid1" { in_up=1 }
                in_up && $1=="server" { 
                  m=match($0, /127\.0\.0\.1:([0-9]+)/, a); 
                  if(m) { print a[1]; exit } 
                }
              ' "$CONF" || true)

              if [ "$ACTIVE_PORT" = "$BLUE" ]; then
                NEW=$GREEN
                NEW_NAME="${NAME}_green"
              else
                NEW=$BLUE
                NEW_NAME="${NAME}_blue"
              fi

              sudo docker pull "$IMAGE"
              sudo docker rm -f "$NEW_NAME" >/dev/null 2>&1 || true
              sudo docker run -d --name "$NEW_NAME" -p "$NEW:3000" --restart unless-stopped "$IMAGE"

              # Health check: /health -> fallback /
              HEALTH="http://127.0.0.1:$NEW/health"
              if ! curl -fsI "$HEALTH" >/dev/null 2>&1; then HEALTH="http://127.0.0.1:$NEW/"; fi
              for i in {1..20}; do
                if curl -fs "$HEALTH" >/dev/null 2>&1; then echo "Healthy ($HEALTH)"; break; fi
                sleep 3
                if [ $i -eq 20 ]; then echo "Health check failed"; sudo docker logs "$NEW_NAME" || true; exit 1; fi
              done

              # Update upstream port hanya di dalam block upstream farid1
              sudo awk -v p="$NEW" '
                $1=="upstream" && $2=="farid1" { in_up=1 }
                in_up && $1=="server" {
                  gsub(/127\.0\.0\.1:[0-9]+/, "127.0.0.1:" p)
                }
                /}/ && in_up { in_up=0 }
                { print }
              ' "$CONF" | sudo tee "$CONF.tmp" >/dev/null

              sudo mv "$CONF.tmp" "$CONF"
              sudo nginx -t
              sudo nginx -s reload

              # Switch nama container (optional)
              sudo docker rm -f "$NAME" >/dev/null 2>&1 || true
              sudo docker rename "$NEW_NAME" "$NAME"

              # Optional: bersihkan image/container/network sisa
              sudo docker image prune -a -f || true


      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ steps.vars.outputs.sha_short }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          MESSAGE=$(cat <<EOF
          🚀 *VSPRING MENYALA*

          ✅ *Docker Image Successfully Pushed to GHCR*

          📦 *Image:* \`$IMAGE_NAME:$TAG\`
          🌿 *Branch:* \`$BRANCH_NAME\`
          📝 *Commit:* $COMMIT_MESSAGE
          👤 *Author:* $COMMIT_AUTHOR
          📅 *Date:* $(date +"%Y-%m-%d %H:%M:%S")
          EOF
          )
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
