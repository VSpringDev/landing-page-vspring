name: Build, Push, and Deploy Docker to GHCR

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: landing-page-vspring
  GHCR_ORG: vspringdev
  REGISTRY: ghcr.io

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & Push (cached)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VM (simple)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE_NAME="ghcr.io/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"

            echo "Pulling image: $IMAGE_NAME"
            sudo docker pull $IMAGE_NAME

            echo "Stopping and removing existing container (if any)"
            sudo docker rm -f ${{ env.IMAGE_NAME }} || true

            echo "Running new container"
            sudo docker run -d \
              --name ${{ env.IMAGE_NAME }} \
              -p 3000:3000 \
              --restart unless-stopped \
              $IMAGE_NAME

      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ steps.vars.outputs.sha_short }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          MESSAGE=$(cat <<EOF
          🚀 *VSPRING MENYALA*

          ✅ *Docker Image Successfully Pushed to GHCR*

          📦 *Image:* \`$IMAGE_NAME:$TAG\`
          🌿 *Branch:* \`$BRANCH_NAME\`
          📝 *Commit:* $COMMIT_MESSAGE
          👤 *Author:* $COMMIT_AUTHOR
          📅 *Date:* $(date +"%Y-%m-%d %H:%M:%S")
          EOF
          )
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
