name: Build, Push, and Deploy Docker to GHCR

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: landing-page-vspring
  GHCR_ORG: vspringdev
  REGISTRY: ghcr.io

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & Push (cached)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
            ${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VM (Blue/Green fixed ports)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE="${{ env.REGISTRY }}/${{ env.GHCR_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"
            NAME="${{ env.IMAGE_NAME }}"

            # OPTIONAL: Login GHCR di VM jika repository PRIVATE
            if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | sudo docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            CURRENT_UPSTREAM_FILE=/etc/nginx/conf.d/farid1_upstream.conf
            BLUE_PORT=3000
            GREEN_PORT=3001

            # Tentukan active port dari file upstream sekarang
            ACTIVE_PORT=$(grep -oE '127\.0\.0\.1:[0-9]+' "$CURRENT_UPSTREAM_FILE" 2>/dev/null | cut -d: -f2 || true)
            if [ "$ACTIVE_PORT" = "$BLUE_PORT" ]; then
              NEW_PORT=$GREEN_PORT
              NEW_NAME="${NAME}_green"
            else
              NEW_PORT=$BLUE_PORT
              NEW_NAME="${NAME}_blue"
            fi

            echo "[1/6] Pull image: $IMAGE"
            sudo docker pull "$IMAGE"

            echo "[2/6] Jalankan container baru di $NEW_PORT"
            # Hentikan container NEW_NAME jika ada sisa
            sudo docker rm -f "$NEW_NAME" >/dev/null 2>&1 || true
            sudo docker run -d \
              --name "$NEW_NAME" \
              -p "$NEW_PORT:3000" \
              --restart unless-stopped \
              "$IMAGE"

            echo "[3/6] Health check..."
            ATTEMPTS=20
            for i in $(seq 1 $ATTEMPTS); do
              if curl -fs "http://127.0.0.1:$NEW_PORT/health" >/dev/null 2>&1; then
                echo "Healthy on attempt $i"
                break
              fi
              sleep 3
              if [ "$i" -eq "$ATTEMPTS" ]; then
                echo "Container failed health check" >&2
                sudo docker logs "$NEW_NAME" || true
                exit 1
              fi
            done

            echo "[4/6] Switch Nginx upstream -> $NEW_PORT"
            echo "upstream farid1_backend { server 127.0.0.1:$NEW_PORT; }" | sudo tee "$CURRENT_UPSTREAM_FILE" >/dev/null
            sudo nginx -s reload

            echo "[5/6] Bersihkan container lama (nama resmi)"
            sudo docker rm -f "$NAME" >/dev/null 2>&1 || true

            echo "[6/6] Rename container baru jadi nama resmi"
            sudo docker rename "$NEW_NAME" "$NAME"

            # OPTIONAL: bersihkan image lama
            sudo docker image prune -a -f || true

      - name: Send Telegram Notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ steps.vars.outputs.sha_short }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          MESSAGE=$(cat <<EOF
          🚀 *VSPRING MENYALA*

          ✅ *Docker Image Successfully Pushed to GHCR*

          📦 *Image:* \`$IMAGE_NAME:$TAG\`
          🌿 *Branch:* \`$BRANCH_NAME\`
          📝 *Commit:* $COMMIT_MESSAGE
          👤 *Author:* $COMMIT_AUTHOR
          📅 *Date:* $(date +"%Y-%m-%d %H:%M:%S")
          EOF
          )
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown
